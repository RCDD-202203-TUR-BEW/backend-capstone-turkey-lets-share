paths:
  /api/user/{id}:
    get:
      tags:
        - get users
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'ID of the user'
          examples:
            'real ID of an available user':
              value: '62eb038c20b4f5b0bd8c7676'
            'real ID of a deleted user':
              value: '62ee5c280262c62f56124dfd'
            'some fake ObjectId':
              value: 'fake5c280262c62f56124dfd'
            'custom':
              value: ''
      responses:
        '200':
          description: 'OK (shows user)'
        '404':
          description: 'Not Found (user was not found)'
        '401':
          description: 'Unauthorized (one needs to be logged in)'
        '500':
          description: 'Internal server error (ID is not a valid ObjectId or a server error occurred)'
    delete:
      tags:
        - User
      responses:
        '201':
          description: 'User Deleted'
        '400':
          description: 'Bad request (either validation or database error)'
        '500':
          description: 'Internal server error'
