paths:
  /api/user/profile:
    get:
      tags:
        - User
      summary: 'Returns the information of the logged in user'
      description: 'Should return the information of current user'
      produces:
        - 'application/json'
      responses:
        '200':
          description: 'OK (User info is fetched)'
        '401':
          description: 'Unauthorized (No authorization token was found)'
        '500':
          description: 'Internal server error'
  /api/user/{id}:
    get:
      tags:
        - User
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: 'ID of the user'
          examples:
            'real ID of an available user':
              value: '62e7aa14c0f7ad46403b142e'
            'real ID of a deleted user':
              value: '62ee5c280262c62f56124dfd'
            'some fake ObjectId':
              value: 'fake5c280262c62f56124dfd'
            'custom':
              value: ''
      responses:
        '200':
          description: 'OK (shows user)'
        '401':
          description: 'Unauthorized (one needs to be logged in)'
        '404':
          description: 'Not Found (user was not found)'
        '500':
          description: 'Internal server error (ID is not a valid ObjectId or a server error occurred)'
